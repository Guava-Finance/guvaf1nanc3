plugins {
    id 'com.android.application'
    id 'kotlin-android'
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id 'dev.flutter.flutter-gradle-plugin'
}

// Create a new Properties object
def keystoreProperties = new Properties()

// Load the key.properties file into the Properties object
def keystorePropertiesFile = rootProject.file("key.properties")
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    namespace = 'finance.guava'
    compileSdk = 35
    // compileSdk = flutter.compileSdkVersion
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId = 'finance.guava'
        // You can update the following values to match your application needs.
        // For more information, see: https://flutter.dev/to/review-gradle-config.
        minSdk = flutter.minSdkVersion
        targetSdk = flutter.targetSdkVersion
        versionCode = flutter.versionCode
        versionName = flutter.versionName
    }

//    signingConfigs {
//        create("release") {
//            keyAlias = keystoreProperties["keyAlias"] as String
//            keyPassword = keystoreProperties["keyPassword"] as String
//            storeFile = keystoreProperties["storeFile"]?.let { file(it) }
//            storePassword = keystoreProperties["storePassword"] as String
//        }
//    }
    signingConfigs {
        release {
            // CI=true is exported by Codemagic
//            if (System.getenv()['CI']) {
//                storeFile file(System.getenv()['CM_KEYSTORE_PATH'])
//                storePassword System.getenv()['CM_KEYSTORE_PASSWORD']
//                keyAlias System.getenv()['CM_KEY_ALIAS']
//                keyPassword System.getenv()['CM_KEY_PASSWORD']
//            } else {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
//            }
        }
    }

    buildTypes {
        release {
            // Signing with the debug keys for now, so `flutter run --release` works.
//            signingConfig = signingConfigs.debug
            signingConfig = signingConfigs.release
//            signingConfig = signingConfigs.getByName("release")
        }
    }



    signingConfigs {
        release {
            // CI=true is exported by Codemagic
//            if (System.getenv()['CI']) {
//                storeFile file(System.getenv()['CM_KEYSTORE_PATH'])
//                storePassword System.getenv()['CM_KEYSTORE_PASSWORD']
//                keyAlias System.getenv()['CM_KEY_ALIAS']
//                keyPassword System.getenv()['CM_KEY_PASSWORD']
//            } else {
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
                storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
                storePassword keystoreProperties['storePassword']
//            }
        }
    }
}

flutter {
    source = '../..'
}
